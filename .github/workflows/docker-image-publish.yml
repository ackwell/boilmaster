name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  workflow_dispatch: {}
  push:
    branches: ["release"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # we edit REPO later, this is just to remove the warnings from it "not existing" in editor.
  REPO:

jobs:
  build-and-push-image:
    strategy:
      # If one instance of the matrix fails kill the job.
      fail-fast: true
      matrix:
        platform:
          - os_name: x86_64
            os: ubuntu-latest
            arch: x86_64-unknown-linux-gnu
            target: linux/amd64
            zlib: x86_64-linux-gnu
            pkg-config-path: /usr/lib/pkgconfig/
            pkg-config-sysroot-dir: /usr/lib/aarch64-linux-gnu/
          - os_name: arm64
            os: ubuntu-latest
            arch: aarch64-unknown-linux-gnu
            target: linux/arm64
            zlib: aarch64-linux-gnu
            pkg-config-path: /usr/lib/aarch64-linux-gnu/pkgconfig/
            pkg-config-sysroot-dir: /usr/lib/aarch64-linux-gnu/

    runs-on: ${{ matrix.platform.os }}

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest-${{ matrix.platform.os_name }}
            type=sha

      # Make QEMU available for the final arm image creation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          build-args: |
            arch=${{ matrix.platform.arch }}
            zlib=${{ matrix.platform.zlib }}
            pkg-config-path=${{ matrix.platform.pkg-config-path}}
            pkg-config-sysroot-dir=${{ matrix.platform.pkg-config-sysroot-dir }}
            target=${{ matrix.platform.target }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  create-manifests:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # we need to convert the repo name to lowercase because we are manually creating the combined manifest for multi-arch and docker manifest forces as lowercase but will not convert it for you.
      - name: convert to lower
        run: |
          echo "REPO=${GITHUB_REPOSITORY@L}" >>${GITHUB_ENV}

      - name: Create multiarch manifests
        run: |
          docker manifest create \
          ${{ env.REGISTRY }}/${{ env.REPO }}:latest \
          --amend ${{ env.REGISTRY }}/${{ env.REPO }}:latest-x86_64 \
          --amend ${{ env.REGISTRY }}/${{ env.REPO }}:latest-arm64
          docker manifest push ${{ env.REGISTRY }}/${{ env.REPO }}:latest
